 The Sliding Window Log Rate Limiting Algorithm


  The Sliding Window Log algorithm is a highly accurate rate-limiting method that overcomes the major drawback of the "Fixed Window Counter" algorithm. Instead of just counting
  requests in fixed time blocks (e.g., a minute), it maintains a log of timestamps for each request and evaluates them within a precise "sliding" window of time.

  Core Concepts


   1. Request Log: A list (or queue) of timestamps for every incoming request is maintained for each user/IP.
   2. Window Size (or Lookback Period): A fixed duration of time to "look back" from the current moment (e.g., 60 seconds). This defines our sliding window.
   3. Capacity (or Threshold): The maximum number of requests allowed within the window size.


  ---

  How It Works: The Algorithm

  When a new request arrives at time T:


   1. Prune the Log: Remove (or discard) all timestamps from the log that are older than T - Window Size. These requests are outside the current sliding window and are no longer
      relevant.
   2. Count and Decide: Count the number of timestamps remaining in the log.
       * If the count is less than the Capacity, the request is allowed.
       * If the count is equal to or greater than the Capacity, the request is rejected (rate-limited).
   3. Log the Request: Add the timestamp T of the current request to the log, regardless of whether it was allowed or rejected.

  ---

  Walkthrough with Visual Representation


  Let's use your example:
   * Window Size: 60 seconds
   * Capacity: 3 requests

  Initial State
  The log of timestamps is empty.
  Log: []


  1. Request at t = 0s
   * Prune: The log is empty, nothing to prune.
   * Count: The log has 0 timestamps. 0 < 3, so the request is ALLOWED.
   * Log: Add the new timestamp. Log: [0]



   1 Time  : ...-1  0  1 ...
   2 Events:       *
   3 Window: [---------------- 60s window ----------------] (from -60s to 0s)



  2. Request at t = 30s
   * Prune: The window is [30-60, 30], i.e., [-30, 30]. The timestamp 0 is within this window, so nothing is pruned.
   * Count: The log has 1 timestamp ([0]). 1 < 3, so the request is ALLOWED.
   * Log: Add the new timestamp. Log: [0, 30]



   1 Time  : ... 0 ...... 30 ......
   2 Events:     *        *
   3 Window:            [---------------- 60s window ----------------] (from -30s to 30s)



  3. Request at t = 45s
   * Prune: The window is [45-60, 45], i.e., [-15, 45]. Timestamps 0 and 30 are within this window.
   * Count: The log has 2 timestamps ([0, 30]). 2 < 3, so the request is ALLOWED.
   * Log: Add the new timestamp. Log: [0, 30, 45]



   1 Time  : ... 0 ...... 30 .... 45 ...
   2 Events:     *        *      *
   3 Window:                   [---------------- 60s window ----------------] (from -15s to 45s)



  4. Request at t = 59s
   * Prune: The window is [59-60, 59], i.e., [-1, 59]. All timestamps 0, 30, 45 are within this window.
   * Count: The log has 3 timestamps. 3 is not less than 3, so the request is REJECTED.
   * Log: Even though it was rejected, we add the new timestamp. Log: [0, 30, 45, 59]



   1 Time  : ... 0 ...... 30 .... 45 ...... 59
   2 Events:     *        *      *          X  <-- REJECTED
   3 Window:                               [--- 60s window ---] (from -1s to 59s)



  5. Request at t = 110s
  This step clearly shows the "sliding" and "pruning" nature of the algorithm.
   * Prune: The new window is [110-60, 110], i.e., [50, 110]. We check our log [0, 30, 45, 59] against this window:
       * 0 is less than 50. Remove.
       * 30 is less than 50. Remove.
       * 45 is less than 50. Remove.
       * 59 is within [50, 110]. Keep.
   * The log after pruning is [59].
   * Count: The log now has 1 timestamp. 1 < 3, so the request is ALLOWED.
   * Log: Add the new timestamp. Log: [59, 110]



   1 Time  : ... 50 ...... 59 ..................... 110
   2 Window:     [---------------- 60s window ----------------]
   3 Events:               * (old, kept)           * (new, allowed)


  ---

  Analysis: Pros and Cons


  Pros
   * High Accuracy: This is the biggest advantage. By tracking individual timestamps, the rate limit is enforced perfectly. It completely prevents the "edge burst" problem where a user
     could send double the allowed requests at the boundary of two fixed windows.
   * Fairness: The rolling window is tailored to each user's request time, making the system's behavior consistent and predictable.


  Cons
   * Memory Usage: The algorithm can be memory-intensive. It must store a timestamp for every single request (even rejected ones) for every user. For a service with millions of users
     and a high request limit, this can lead to significant memory consumption.
   * Processing Cost: Each request requires a write (to add the new timestamp) and potentially multiple reads and discards (to prune the log). While efficient data structures (like a
     sorted set or a queue) can optimize this, it's still more work than a simple counter increment.
